#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'pp'

require 'vk-url-checker'

class CliParser

    # Class variables
    @allowed_opt = {
        :addr => ["-a", "--address"],
        :title => ["-t", "--title"],
        :conseq => ["-c", "--consequence"]
    }
    Options = Struct.new(*@allowed_opt.keys)

    class << self
        attr_reader :parser, :options
    end

    def self.parse(args)
        @options = Options.new
        begin
            option_parser.parse!(args)
        rescue OptionParser::MissingArgument => mis_arg_e
            missing_arg_exception(mis_arg_e)
        rescue OptionParser::InvalidOption => inv_opt_e
            inv_opt_exception(inv_opt_e)
        end
        @options
    end

    def self.option_parser
        @parser ||= OptionParser.new do |parser|
            parser.banner = "Usage: url-checker.rb [options]"
            parser.separator "\t"
            parser.separator "Specific options:"
            parser.separator "\t"
            parser.separator "Common options:"

            # No argument, shows at tail.  This will print an options summary.
            # Try it and see!
            parser.on_tail("-h", "--help", "Show this message") do
                puts parser
                exit
            end

            # Another typical switch to print the version.
            parser.on_tail("--version", "Show version") do
                puts "0.0.1"
                exit
            end

        end
        # add additional options
        address_option
        expectated_title_option

        @parser
    end

    def self.address_option
        parser.on(:REQUIRED, *make_options_list(:addr, "ADDR"), String,
            "Address vk") do |addr|
            options.addr = addr
        end
    end

    def self.expectated_title_option
        parser.on(:REQUIRED, *make_options_list(:title, "TITLE"), String,
            "Expected title") do |title|
            options.title = title
        end
    end

    def self.make_options_list(opt_sym, opt_holder)
        [
            @allowed_opt[opt_sym][0],
            @allowed_opt[opt_sym][1] + " " + opt_holder
        ]
    end

    def self.missing_arg_exception(expt)
        case arg = /\w: (?<arg>.*)/.match(expt.message)[:arg]
        when *@allowed_opt[:addr]
            $stderr.print "Missing argument: #{arg} <url>\n"
            exit 1
        when *@allowed_opt[:title]
            $stderr.print "Missing argument: #{arg} <title>\n"
            exit 1
        end
    end

    def self.inv_opt_exception(expt)
        $stderr.print expt.message + "\n"
        exit 1
    end

end

if __FILE__==$0
    # this will only run if the script was the main, not load'd or require'd
    cli_parser = CliParser.parse(ARGV)

    # DATA_DIR = ENV["HOME"] + ".config/"
    # Dir.mkdir(DATA_DIR) unless File.exists?(DATA_DIR)

    checker = VKTools::UrlChecker::Checker.new()

    result = checker.check(cli_parser.addr);
    if (result[:status] == VKTools::UrlChecker::STATUS[:Coincidence]) then
        puts "OK!"
    elsif (result[:status] == VKTools::UrlChecker::STATUS[:Avaliable]) then
        puts "Short address is avaliable!\n"
    elsif (result[:status] == VKTools::UrlChecker::STATUS[:Busy]) then
        puts "Page title: #{result[:title]}"
    end
end
